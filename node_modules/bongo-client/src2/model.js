// Generated by CoffeeScript 1.3.3
(function() {
  var Model,
    __slice = [].slice;

  module.exports = Model = (function() {
    var EventMultiplexer, JsPath, MongoOp, createId, extend;

    function Model() {}

    MongoOp = require('mongoop');

    JsPath = require('jspath');

    EventMultiplexer = require('./eventmultiplexer');

    createId = Model.createId = require('hat');

    extend = require('./util').extend;

    Model.prototype.mixin = Model.mixin = function(source) {
      var key, val, _results;
      _results = [];
      for (key in source) {
        val = source[key];
        if (key !== 'constructor') {
          _results.push(this[key] = val);
        }
      }
      return _results;
    };

    Model.on = (function() {
      var channels;
      channels = [];
      return function(event, listener) {
        var channel, _name,
          _this = this;
        if (this.prototype.mq != null) {
          channel = channels[_name = this.name] || (channels[_name] = this.prototype.mq.subscribe(this.name));
          return channel.bind(event, function() {
            return _this.wrapArgs([].slice.call(arguments), function(args) {
              return listener.apply(null, args);
            });
          });
        } else {
          return typeof this.on_ === "function" ? this.on_(event, listener) : void 0;
        }
      };
    })();

    Model.off = function(event, listener) {
      if (this.prototype.mq != null) {

      } else {
        return typeof this.off_ === "function" ? this.off_(event, listener) : void 0;
      }
    };

    Model.prototype.on = function() {};

    Model.prototype.off = function() {};

    Model.prototype.watch = function(field, watcher) {
      var _base;
      (_base = this.watchers)[field] || (_base[field] = []);
      return this.watchers[field].push(watcher);
    };

    Model.prototype.unwatch = function(field, watcher) {
      if (!watcher) {
        return delete this.watchers[field];
      } else {
        return this.watchers.splice(this.watchers.indexOf(watcher), 1);
      }
    };

    Model.prototype.init = function(data) {
      var model;
      model = this;
      model.watchers = {};
      model.bongo_ || (model.bongo_ = {});
      if ('defineProperty' in Object) {
        Object.defineProperty(this, 'multiplexer', {
          enumerable: false,
          value: new EventMultiplexer
        });
      } else {
        this.multiplexer = new EventMultiplexer;
      }
      if (data != null) {
        model.set(data);
      }
      if (!('instanceId' in model.bongo_)) {
        model.bongo_.instanceId = createId();
      }
      return typeof this.afterInit === "function" ? this.afterInit() : void 0;
    };

    Model.prototype.set = function(data) {
      var model;
      if (data == null) {
        data = {};
      }
      model = this;
      delete data.data;
      extend(model, data);
      return model;
    };

    Model.prototype.getFlagValue = function(flagName) {
      var _ref;
      return (_ref = this.flags_) != null ? _ref[flagName] : void 0;
    };

    Model.prototype.watchFlagValue = function(flagName, callback) {
      return this.watch("flags_." + flagName, callback);
    };

    Model.prototype.unwatchFlagValue = function(flagName) {
      return this.unwatch("flags_." + flagName);
    };

    Model.prototype.getAt = function(path) {
      return JsPath.getAt(this, path);
    };

    Model.prototype.setAt = function(path, value) {
      return JsPath.setAt(this, path, value);
    };

    Model.prototype.getId = function() {
      return this._id;
    };

    Model.prototype.equals = function(model) {
      if (this.getId && (model != null ? model.getId : void 0)) {
        return this.getId() === model.getId();
      } else {
        return this === model;
      }
    };

    Model.prototype.save = function(callback) {
      var model;
      model = this;
      return model.save_(function(err, docs) {
        if (err) {
          return callback(err);
        } else {
          extend(model, docs[0]);
          bongo.addReferences(model);
          return callback(null, docs);
        }
      });
    };

    Model.prototype.emit = function() {
      var event, listener, listeners, rest, _i, _len, _ref, _results;
      event = arguments[0], rest = 2 <= arguments.length ? __slice.call(arguments, 1) : [];
      listeners = ((_ref = this.multiplexer.events[event]) != null ? _ref.listeners : void 0) || [];
      _results = [];
      for (_i = 0, _len = listeners.length; _i < _len; _i++) {
        listener = listeners[_i];
        _results.push(listener.apply(this, rest));
      }
      return _results;
    };

    Model.prototype.update_ = function(data) {
      var fields,
        _this = this;
      fields = new MongoOp(data).applyTo(this);
      Object.keys(fields).forEach(function(field) {
        var _ref;
        return (_ref = _this.watchers[field]) != null ? _ref.forEach(function(watcher) {
          return watcher.call(_this, fields[field]);
        }) : void 0;
      });
      return this.emit('update');
    };

    Model.prototype.addListener = Model.prototype.on;

    Model.prototype.removeListener = Model.prototype.off;

    return Model;

  })();

}).call(this);
