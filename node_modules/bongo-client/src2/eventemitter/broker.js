// Generated by CoffeeScript 1.3.3
(function() {

  module.exports = (function() {
    var defineProperty, getPusherEvent;
    getPusherEvent = function(event) {
      if (Array.isArray(event)) {
        return event = event.join(':');
      } else {
        return event;
      }
    };
    defineProperty = Object.defineProperty;
    return {
      afterInit: (function() {
        var channels;
        channels = {};
        return function() {
          var broadcastable, id, name, _ref,
            _this = this;
          broadcastable = this.constructor.broadcastable;
          id = (typeof this.getId === "function" ? this.getId() : void 0) || ((_ref = this.bongo_) != null ? _ref.instanceId : void 0);
          if (broadcastable && (id != null)) {
            name = "object-" + id;
            defineProperty(this, "channel", {
              get: function() {
                return channels[name] || (channels[name] = _this.mq.subscribe(name));
              }
            });
            return this.updateInstanceChannel.on(name, function(data) {
              if (data.update) {
                return _this.update_(data.update);
              }
            });
          }
        };
      })(),
      destroy: function() {
        if (this.channel == null) {
          return;
        }
        return this.mq.unsubscribe(this.channel);
      },
      on: function(event, listener) {
        var constructor, id, multiplex, name, _ref;
        constructor = this.constructor;
        multiplex = this.multiplexer.on(event, function(data) {
          var payload;
          payload = data != null ? data[event] : void 0;
          if (payload != null) {
            return constructor.wrapArgs([payload], function(_arg) {
              var arg;
              arg = _arg[0];
              return listener(arg);
            });
          } else if (event === 'update') {
            return listener();
          }
        });
        id = (typeof this.getId === "function" ? this.getId() : void 0) || ((_ref = this.bongo_) != null ? _ref.instanceId : void 0);
        if ((id != null) && multiplex && event !== 'update') {
          name = "object-" + id;
          return this.updateInstanceChannel.on(name, multiplex);
        }
      },
      off: function(event, listener) {
        return this.channel.off(event, listener);
      }
    };
  })();

}).call(this);
