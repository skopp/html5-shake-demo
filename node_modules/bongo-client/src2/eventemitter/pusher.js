// Generated by CoffeeScript 1.3.3
(function() {

  module.exports = (function() {
    var defineProperty, getPusherEvent;
    getPusherEvent = function(event) {
      if (Array.isArray(event)) {
        return event = event.join(':');
      } else {
        return event;
      }
    };
    defineProperty = Object.defineProperty;
    return {
      afterInit: (function() {
        var channels;
        channels = {};
        return function() {
          var broadcastable, id, name, _ref,
            _this = this;
          broadcastable = this.constructor.broadcastable;
          id = (typeof this.getId === "function" ? this.getId() : void 0) || ((_ref = this.bongo_) != null ? _ref.instanceId : void 0);
          if (broadcastable && (id != null)) {
            name = "object-" + id;
            defineProperty(this, 'channel', {
              value: channels[name] || (channels[name] = this.mq.subscribe(name))
            });
            return this.channel.bind('updateInstance', function(data) {
              return _this.update_(data);
            });
          }
        };
      })(),
      destroy: function() {
        return this.mq.unsubscribe("object-" + id);
      },
      on: function(event, listener) {
        var constructor, multiplex;
        constructor = this.constructor;
        event = getPusherEvent(event);
        multiplex = this.multiplexer.on(event, function() {
          return constructor.wrapArgs([].slice.call(arguments), function(args) {
            return listener.apply(null, args);
          });
        });
        if (multiplex) {
          return this.channel.bind(event, multiplex);
        }
      },
      off: function(event, listener) {}
    };
  })();

}).call(this);
