module.exports = class Model
  
  # contrib
  MongoOp   = require 'mongoop'
  JsPath = require 'jspath'
  
  EventMultiplexer = require './eventmultiplexer'
  createId  = @createId = require 'hat'

  {extend} = require './util'
  
  mixin: @mixin = (source)->
    @[key] = val for key,val of source when key isnt 'constructor'
  
  @on =do ->
    channels = []
    (event, listener)->
      if @::mq?
        channel = channels[@name] or= @::mq.subscribe @name
        channel.bind event, => @wrapArgs [].slice.call(arguments), (args)->
          listener args...
      else @on_? event, listener
  
  @off =(event, listener)->
    if @::mq?
      # channel = @mq.subscribe @name
    else @off_? event, listener
  
  on:->

  off:->

  watch:(field, watcher)->
    @watchers[field] or= []
    @watchers[field].push watcher
  
  unwatch:(field, watcher)->
    unless watcher
      delete @watchers[field]
    else
      @watchers.splice @watchers.indexOf(watcher), 1
  
  init:(data)->
    model = @
    model.watchers = {}
    model.bongo_ or= {}
    if 'defineProperty' of Object
      Object.defineProperty @, 'multiplexer'
        enumerable: no
        value: new EventMultiplexer
    else
      @multiplexer = new EventMultiplexer
    if data?
      model.set data
      # Object.keys(data).forEach (key)->
      #   Object.defineProperty model, key,
      #     get:-> model.data[key]
      #     set:(val)-> model.data[key] = val
    unless 'instanceId' of model.bongo_
      model.bongo_.instanceId = createId()
    @afterInit?()
    
  set:(data={})->
    model = @
    delete data.data
    # model.data or= {}
    extend model, data
    model
  
  getFlagValue:(flagName)->
    @flags_?[flagName]
  
  watchFlagValue:(flagName, callback)->
    @watch "flags_.#{flagName}", callback
  
  unwatchFlagValue:(flagName)->
    @unwatch "flags_.#{flagName}"
  
  getAt:(path)-> JsPath.getAt @, path
  
  setAt:(path, value)-> JsPath.setAt @, path, value
  
  getId:-> @_id
  
  equals:(model)->
    if @getId and model?.getId
      @getId() is model.getId()
    else
      @ is model

  save:(callback)->
    model = @
    model.save_ (err, docs)->
      if err
        callback err
      else
        extend model, docs[0] # replace local values with server-validated ones.
        bongo.addReferences model
        callback null, docs
  
  emit:(event, rest...)->
    listeners = @multiplexer.events[event]?.listeners || []
    listener.apply @, rest for listener in listeners
  
  update_:(data)->
    fields = new MongoOp(data).applyTo @
    Object.keys(fields).forEach (field)=>
      @watchers[field]?.forEach (watcher)=> watcher.call @, fields[field]
    @emit 'update'
  # alias these:
  addListener     : @::on
  removeListener  : @::off