var Inflector;
var __hasProp = Object.prototype.hasOwnProperty, __slice = Array.prototype.slice;
module.exports = Inflector = (function() {
  var alias, aliases, inflection, orig;
  inflection = require('./dep/inflection');
  aliases = {
    slugify: 'dasherize'
  };
  for (alias in aliases) {
    if (!__hasProp.call(aliases, alias)) continue;
    orig = aliases[alias];
    inflection[alias] = inflection[orig];
  }
  Object.keys(inflection).forEach(function(key) {
    Inflector[key] = inflection[key];
    return Inflector.prototype[key] = function() {
      this.value = Inflector[key].apply(Inflector, [this.value].concat(__slice.call(arguments)));
      return this;
    };
  });
  function Inflector(value) {
    if (!(this instanceof Inflector)) {
      return new Inflector(value);
    } else {
      this.value = value;
    }
  }
  Inflector.prototype.tap = function(callback) {
    callback(this.value);
    return this;
  };
  Inflector.prototype.inspect = function() {
    return this + '';
  };
  Inflector.prototype.toString = function() {
    return this.value;
  };
  Inflector.prototype.valueOf = function() {
    return this.value;
  };
  return Inflector;
})();