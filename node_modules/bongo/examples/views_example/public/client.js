(function() {
  var __hasProp = Object.prototype.hasOwnProperty, __extends = function(child, parent) {
    for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; }
    function ctor() { this.constructor = child; }
    ctor.prototype = parent.prototype;
    child.prototype = new ctor;
    child.__super__ = parent.prototype;
    return child;
  };
  require('./view', function(View) {
    var NoteLengthCounterView, NoteView;
    NoteView = (function() {
      __extends(NoteView, View);
      function NoteView() {
        NoteView.__super__.constructor.apply(this, arguments);
      }
      NoteView.prototype.partial = function(data) {
        return "<h2 class=\"subject\">" + data.subject + "</h2>\n<div class=\"body\">" + data.body + "</div>";
      };
      NoteView.prototype.resize = function() {
        return doResizeStuff();
      };
      NoteView.prototype.scroll = function() {
        return doScrollStuff();
      };
      NoteView.prototype.click = {
        '.subject': function() {
          return doSubjectStuff();
        },
        '.body': function() {
          return doBodyStuff();
        }
      };
      return NoteView;
    })();
    NoteLengthCounterView = (function() {
      __extends(NoteLengthCounterView, View);
      function NoteLengthCounterView() {
        NoteLengthCounterView.__super__.constructor.apply(this, arguments);
      }
      NoteLengthCounterView.prototype.partial = function(data) {
        return "The subject of the note is now " + data.subject.length + " characters.";
      };
      return NoteLengthCounterView;
    })();
    return window.onload = function() {
      return bongo.connect(function(api, conn) {
        var Note, note;
        Note = api.Note;
        note = new Note({
          subject: 'this is a test',
          body: 'this is a test body section.'
        });
        return note.save(function(err) {
          var noteLengthView, noteView, prefix;
          if (err) {
            throw err;
          }
          noteView = new NoteView(note);
          noteLengthView = new NoteLengthCounterView(note);
          noteView.appendTo(document.body);
          noteLengthView.appendTo(document.body);
          prefix = [];
          return setInterval(function() {
            prefix.push('up');
            return note.update({
              subject: "this is an " + (prefix != null ? prefix.join('-') : void 0) + "dated test"
            });
          }, 1500);
        });
      });
    };
  });
}).call(this);
