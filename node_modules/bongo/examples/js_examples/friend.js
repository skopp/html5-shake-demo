var bongo = require('../../lib'),
    log = console.log

// Library:
var Friend = 
  bongo.Model.extend({
    client: 'localhost:27017/test',
    schema: {
      name          : String,
      late          : {
        type        : Boolean,
        default     : false
      },
      age: {
        type        : Number,
        default     : function () {
          return Math.ceil((this.gender == 'female' ? 80 : 75) * Math.random());
        },
        validator   : ['only friends with legal adults.', function (value) {
          return value >= 18;
        }]
      },
      gender        : {
        type        : String,
        enum        : ['please choose "male" or "female"', ['male','female']]
      },
      favoriteColor : {
        type        : String,
        enum        : [
          "only interested in culitvating friendships "+
          "with people whose favorite colors are primary.",
          ['red','blue','yellow']
        ]
      }
    }
  },
  {
    constructor: function Friend(data) {
      this.Uber(data); // this.Uber() is the superconstructor.
      this.on('save', function(){
        log('saved a new friend: '+this.name);
      });
    },
    say: function (stuff) {
      log(this.name + ': ' +stuff);
      return this;
    },
    hear: function (stuff, friend) {
      if (stuff instanceof Error) {
        this.say('lame');
      } else {
        this.say('wow, cool!');
      }
      return this;
    },
    hello: function (name) {
      this.say(''
        .concat(
          'hello',
          name ? name.name ? ' '+name.name : ' '+name : '',
          ', my name is ',
          this.name,
          '.'
        )
      );
      return this;
    },
    kill: function () {
      this.say("Ow, you killed me! That's not nice, you awful jerk!");
      this.late = true;
      this.emit('died');
      return this;
    }
  });

muammar = new Friend({
  name: 'Muammar',
  gender: 'male'
});

// override the "hear" method because
// muammar is very irritible by nature :)
muammar.hear = function (stuff, friend) {
  if (stuff instanceof Error) {
    if (stuff.errors.length) {
      while (err = stuff.errors.shift()) {
        this.say(err.message);
      }
    } else if (stuff.message) {
      this.say(stuff.message);
    }
    this.say('That does it! *stab*');
    friend.kill();
  }
  else {
    this.say('tell it to someone who cares.');
    // muammar is not a very good friend.
  }
}
// Application:
tom = new Friend({
  name          : 'Tom',
  favoriteColor : 'red',
  gender        : 'male'
})
  .hello(muammar)
  .on('save', function () {
    process.kill();
  })
  .save();

hilda = new Friend({
  name          : 'Hilda',
  favoriteColor : 'salmon',
  gender        : 'female'
});

tom.hello(hilda);

hilda
  .hello(tom)
  .hello(muammar)
  .on('died', function (err) {
    tom.say('at least it was hilda, and not me!');
  })
  .on('error', function (err) {
    muammar.hear(err, this);
  })
  .save();

console.log(tom, hilda);